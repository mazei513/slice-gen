package generator

import "text/template"

var tpl = template.Must(template.New("generated").
	Parse(`
// Code generated by github.com/mazei513/slice-gen, DO NOT EDIT.
package {{.Package}}

func Delete{{.Name}}(i int, a []{{.TypeName}}) []{{.TypeName}} {
	s := make([]{{.TypeName}}, i, len(a)-1)
	copy(s, a)
	return append(s, a[i+1:]...)
}
func DeleteRange{{.Name}}(from, to int, a []{{.TypeName}}) []{{.TypeName}} {
	s := make([]{{.TypeName}}, from, len(a)-(to-from))
	copy(s, a)
	return append(s, a[to+1:]...)
}
func Insert{{.Name}}(i int, o {{.TypeName}}, a []{{.TypeName}}) []{{.TypeName}} {
	var zero {{.TypeName}}
	s := append(a, zero)
	copy(s[i+1:], a[i:])
	s[i] = o
	return s
}
func Push{{.Name}}(o {{.TypeName}}, a []{{.TypeName}}) []{{.TypeName}} {
	return append(a, o)
}
func Pop{{.Name}}(a []{{.TypeName}}) ({{.TypeName}}, []{{.TypeName}}) {
	return a[len(a)-1], append([]{{.TypeName}}(nil), a[:len(a)-1]...)
}
func Unshift{{.Name}}(o {{.TypeName}}, a []{{.TypeName}}) []{{.TypeName}} {
	return append([]{{.TypeName}}{o}, a...)
}
func Shift{{.Name}}(a []{{.TypeName}}) ({{.TypeName}}, []{{.TypeName}}) {
	return a[0], append([]{{.TypeName}}(nil), a[1:]...)
}
func Filter{{.Name}}(a []{{.TypeName}}, f func({{.TypeName}}) bool) []{{.TypeName}} {
	b := make([]{{.TypeName}}, 0, len(a))
	for _, x := range a {
		if f(x) {
			b = append(b, x)
		}
	}
	return b
}
`))
